group = 'com.nablarch.framework'
version = '1.0.1'
description = 'ファイル、DBに依存する機能（ファイルアップロード→DB、CSVファイルダウンロードなど）'


buildscript {
  repositories {
    mavenLocal()
    maven { url "${developLibUrl}" }
    jcenter()
  }
  dependencies {
    classpath "com.nablarch.dev:nablarch-gradle-plugin:${nablarchGradlePluginVersion}"
    classpath "net.saliman:gradle-cobertura-plugin:${coberturaPluginVersion}"
  }
}
apply plugin: 'com.nablarch.dev.nablarch-build'
apply plugin: 'com.nablarch.dev.nablarch-maven-deploy'
apply plugin: 'com.nablarch.dev.nablarch-sonarqube'
apply plugin: 'com.nablarch.dev.nablarch-version'
apply plugin: 'cobertura'

// ビルド時のJavaバージョンを指定する
sourceCompatibility=JavaVersion.VERSION_1_6
targetCompatibility=JavaVersion.VERSION_1_6

dependencies {
  compile "com.nablarch.framework:nablarch-fw-web:${nablarchFwWebVersion}"
  compile "com.nablarch.framework:nablarch-core-jdbc:${nablarchCoreJdbcVersion}"
  compile "com.nablarch.framework:nablarch-core-dataformat:${nablarchCoreDataformatVersion}"

  testCompile "net.saliman:gradle-cobertura-plugin:${coberturaPluginVersion}"
  cobertura ("net.sourceforge.cobertura:cobertura:1.9.4") {
    exclude group: 'log4j', module: 'log4j'
  }
  testCompile 'org.jmockit:jmockit:1.13'
  testCompile 'junit:junit:4.12'
  testCompile 'org.hamcrest:hamcrest-all:1.3'
  testCompile 'com.nablarch.dev:nablarch-test-support:0.0.5'
  testCompile 'com.oracle:ucp:11.2.0.3.0'
  testCompile 'com.oracle:ojdbc6:11.2.0.2.0'

  testRuntime 'org.slf4j:slf4j-nop:1.7.12' // for cobertura

  // hereis
  testCompile(group: 'com.nablarch.tool', name: 'nablarch-toolbox', version: '1.0.2') {
    exclude group: 'com.nablarch.profile', module: 'nablarch-all-in-one'
    exclude group: 'com.nablarch.framework', module: 'nablarch-testing'
  }

  testRuntime files('src/test/java/')
}

// カバレッジを取るための設定
File nabDir = new File(buildDir, 'nablarch')
File nabClassesDir = new File("${buildDir}/classes/main/")
File nabSourcesDir = new File(nabDir, 'sources')
String coberturaReportFormat = 'xml'

test {
  jvmArgs (
          '-Xms16m',
          '-Xmx32m',
          '-XX:PermSize=32m',
          '-XX:+UseParallelGC',
          '-Dfile.encoding=UTF-8',
          '-XX:-UseSplitVerifier'
  )

  ignoreFailures = true

  doFirst {
    // masterから本テストを実行するとmaster配下にlogディレクトリが作成されてしまったので、プロジェクト名を明記
    def logDir = new File("${projectDir}/src/test/log")
    if (!logDir.exists()) {
      assert logDir.mkdirs()
    }
  }

  exclude '**/*TestBase.class',
          '**/*SqlServer*',
          '**/*Db2*',
          // testが止まってしまうので、一旦excludeします。
          '**/*MessagingSampleTest*'

  //include 'nablarch/core/util/*Test.class'

  beforeTest { descriptor ->
    logger.lifecycle("Running test: " + descriptor)
  }

  workingDir = file("${projectDir}/src/test")

  cobertura {
    coverageSourceDirs = ["${projectDir}/src/main/java/"]
    coverageIgnoreTrivial = true
    coverageFormats = ['xml']
    coverageDirs = [project.sourceSets.main.output.classesDir]
    auxiliaryClasspath = files('src/main/resources') + configurations.testRuntime.asFileTree
  }
}

def coberturaReportDir = new File(project.buildDir, "cobertura-report")

task generateCoberturaReportByAnt(dependsOn: 'cobertura') {
  def dataFile = "${project.buildDir}/cobertura/cobertura.ser"

  inputs.file file(dataFile)
  outputs.dir coberturaReportDir

  doLast {
    ant {
      taskdef(resource: 'tasks.properties', classpath: configurations.cobertura.asPath + ':' + configurations.testRuntime.asPath)

      'cobertura-report'(
              destdir: coberturaReportDir,
              datafile: dataFile,
              srcdir: "${projectDir}/src/main/java/",
              format: 'xml'
      )
    }
  }
}

task coverage(dependsOn: ['clean', 'generateCoberturaReportByAnt'])

sonarRunner {
  sonarProperties {
    property "sonar.java.coveragePlugin", "cobertura"
    property "sonar.cobertura.reportPath", "${coberturaReportDir}/coverage.xml"
  }
}

tasks.sonarRunner {
  dependsOn = ['coverage']
}

task wrapper(type: Wrapper) {
  gradleVersion = '2.13'
}

